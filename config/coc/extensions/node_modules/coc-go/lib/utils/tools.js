"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const fs_1 = tslib_1.__importDefault(require("fs"));
const child_process_1 = require("child_process");
const coc_nvim_1 = require("coc.nvim");
const which_1 = tslib_1.__importDefault(require("which"));
const config_1 = require("./config");
function installGoTool(name, force = false) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const bin = yield goToolBin(name);
        if (!force && (yield goToolExists(name))) {
            return;
        }
        return ((yield goRun(`get -d -u golang.org/x/tools/cmd/${name}`)) &&
            (yield goRun(`build -o ${bin} golang.org/x/tools/cmd/${name}`)));
    });
}
exports.installGoTool = installGoTool;
function goToolBin(name) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        return path_1.default.join(yield config_1.configDir('bin'), name);
    });
}
exports.goToolBin = goToolBin;
function goToolExists(name) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const bin = yield goToolBin(name);
        return new Promise(resolve => fs_1.default.open(bin, 'r', (err, _) => resolve(err === null)));
    });
}
exports.goToolExists = goToolExists;
function runGoTool(name, args = []) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const bin = yield goToolBin(name);
        return new Promise(resolve => child_process_1.spawn(bin, args).on('close', (code) => resolve(code)));
    });
}
exports.runGoTool = runGoTool;
function goRun(args) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const gopath = yield config_1.configDir('tools');
        const cmd = `GOPATH=${gopath}; go ${args}`;
        const res = yield coc_nvim_1.workspace.runTerminalCommand(cmd);
        return res.success;
    });
}
function commandExists(command) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        return new Promise(resolve => which_1.default(command, (err, _) => resolve(err == null)));
    });
}
exports.commandExists = commandExists;
//# sourceMappingURL=tools.js.map