""
"" Thanks:
""   Gary Bernhardt  <destroyallsoftware.com>
""   Drew Neil  <vimcasts.org>
""   Tim Pope  <tbaggery.com>
""   Janus  <github.com/carlhuda/janus>
""

if !has('nvim')
    set viminfo+=~/.vim/viminfo
endif

set nocompatible
set encoding=utf-8
set exrc                    " load vimrc from current directory

filetype plugin indent on

runtime macros/matchit.vim  " enables % to cycle through `if/else/endif`

syntax enable

" set runtimepath+=/Users/clint/.local/share/nvim/plugged/dracula

set synmaxcol=800           " don't try to highlight long lines
set ruler       " show the cursor position all the time
set cursorline  " highlight the line of the cursor
set showcmd     " show partial commands below the status line
set shell=/bin/bash  " avoids munging PATH under zsh
let g:is_bash=1 " default shell syntax
set history=200 " remember more Ex commands
set scrolloff=3 " have some context around the current line always on screen

" Visual Mode Orange Background, Black Text
hi Visual          guifg=#000000 guibg=#FD971F

" Default Colors for CursorLine
highlight CursorLine guibg=#3E3D32
" highlight Cursor guibg=#A6E22E;

" Change Color when entering Insert Mode
autocmd InsertEnter * highlight  CursorLine guibg=#323D3E
autocmd InsertEnter * highlight  Cursor guibg=#00AAFF;


" Revert Color to default when leaving Insert Mode
autocmd InsertLeave * highlight  CursorLine guibg=#3E3D32
autocmd InsertLeave * highlight  Cursor guibg=#A6E22E;

"" -------

set nolazyredraw           " turn off lazy redraw
set number                 " line numbers
set showbreak=+ " display a + at the beginning of a wrapped line
set listchars=tab:»·,trail:· " show tabs and trailing spaces
set listchars+=extends:»     " show a » when a line goes off the right
                             " edge of the screen
set listchars+=precedes:«    " show a « when a line goes off the left
                             " edge of the screen

" Allow backgrounding buffers without writing them, and remember marks/undo
" for backgrounded buffers
set hidden

" Auto-reload buffers when file changed on disk
set autoread

" Disable swap files; systems don't crash that often these days
set updatecount=0

" Make Vim able to edit crontab files again.
set backupskip=/tmp/*,/private/tmp/*"

"" Whitespace
set nowrap                        " don't wrap lines
set tabstop=2                     " a tab is two spaces
set shiftwidth=2                  " an autoindent (with <<) is two spaces
set smartindent                   " be smart about it
set expandtab                     " use spaces, not tabs
" set nolist                          " don't Show invisible characters
set backspace=indent,eol,start    " backspace through everything in insert mode

" Joining lines
if v:version > 703 || v:version == 703 && has("patch541")
  set formatoptions+=j            " Delete comment char when joining commented lines
endif

set nojoinspaces                  " Use only 1 space after "." when joining lines, not 2

set showbreak=↪\ 

"" Searching
set hlsearch                      " highlight matches
set incsearch                     " incremental searching
set ignorecase                    " searches are case insensitive...
set smartcase                     " ... unless they contain at least one capital letter
set gdefault                      " have :s///g flag by default on

" Time out on key codes but not mappings.
" Basically this makes terminal Vim work sanely.
set notimeout
set ttimeout
set ttimeoutlen=100

" Ragel syntax (default to ruby as host language)
let g:ragel_default_subtype='ruby'

function! s:setupWrapping()
  set wrap
  set wrapmargin=2
  set textwidth=80
endfunction

augroup vimrcEx
  " Clear all autocmds in the group
  autocmd!

  " Avoid showing trailing whitespace when in insert mode
  au InsertEnter * :set listchars-=trail:•
  au InsertLeave * :set listchars+=trail:•

  " Some file types use real tabs
  au FileType {make,gitconfig} setl noexpandtab

  " Make sure all markdown files have the correct filetype set and setup wrapping
  au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn,txt} setf markdown | call s:setupWrapping()

  " Treat JSON files like JavaScript
  au BufNewFile,BufRead *.json setf javascript

  " https://github.com/sstephenson/bats
  au BufNewFile,BufRead *.bats setl filetype=sh

  au BufNewFile,BufRead *.rl setfiletype ragel

  " make Python follow PEP8 ( http://www.python.org/dev/peps/pep-0008/ )
  au FileType python setl softtabstop=4 tabstop=4 shiftwidth=4 textwidth=79

  " Remember last location in file, but not for commit messages.
  " see :help last-position-jump
  au BufReadPost * if &filetype !~ '^git\c' && line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g`\"" | endif

  " mark Jekyll YAML frontmatter as comment
  au BufNewFile,BufRead *.{md,markdown,html,xml} sy match Comment /\%^---\_.\{-}---$/

  " magic markers: enable using `H/S/J/C to jump back to
  " last HTML, stylesheet, JS or Ruby code buffer
  au BufLeave *.{erb,html}      exe "normal! mH"
  au BufLeave *.{css,scss,sass} exe "normal! mS"
  au BufLeave *.{js,coffee}     exe "normal! mJ"
  au BufLeave *.{rb}            exe "normal! mC"
augroup END

" don't use Ex mode, use Q for formatting
map Q gq

" clear the search buffer when hitting return
:nnoremap <CR> :nohlsearch<cr>

" toggle the current fold
" removed b/c folding is annoying when you literally never use it
":nnoremap <Space> za
"set foldmethod=indent   
"set foldnestmax=10
"set nofoldenable
"set foldlevel=2

let mapleader=","
" Show leader keystrokes in the bottom right
set showcmd

" yank to system clipboard
map <leader>y "*y

" paste lines from unnamed register and fix indentation
nmap <leader>p pV`]=
nmap <leader>P PV`]=

" expand %% to current directory in command-line mode
" http://vimcasts.org/e/14
cnoremap %% <C-R>=expand('%:h').'/'<cr>

" CommandT options
map <leader>gl :CommandT lib<cr>
"map <leader>gt :CommandTTag<cr>
map <leader>f :CommandT<cr>
map <leader>F :CommandT %%<cr>

let g:CommandTMaxFiles=200000
let g:CommandTFileScanner = "find"
let g:CommandTAlwaysShowDotFiles = 1
let g:CommandTInputDebounce = 30
let g:CommandTMinHeight = 2
let g:CommandTMatchWindowAtTop=0
let g:CommandTMatchWindowReverse=0

map <leader>. :e .<cr>

" In command-line mode, C-a jumps to beginning (to match C-e)
cnoremap <C-a> <Home>

inoremap <s-tab> <c-p>

" ignore Rubinius, Sass cache files
set wildignore+=tmp/**,*.rbc,.rbx,*.scssc,*.sassc
" ignore Bundler standalone/vendor installs & gems
set wildignore+=bundle/**,vendor/bundle/**,vendor/cache/**,vendor/gems/**
set wildignore+=*/node_modules/*
set wildignore+=.DS_Store

" toggle between last open buffers
nnoremap <leader><leader> <c-^>

" command! GdiffInTab tabedit %|vsplit|Gdiff
" nnoremap <leader>d :GdiffInTab<cr>
" nnoremap <leader>D :tabclose<cr>

command! KillWhitespace :normal :%s/ *$//g<cr><c-o><cr>

" populate arglist with files from the quickfix list
command! -nargs=0 -bar Qargs execute 'args' QuickfixFilenames()
function! QuickfixFilenames()
  " Building a hash ensures we get each buffer only once
  let buffer_numbers = {}
  for quickfix_item in getqflist()
    let buffer_numbers[quickfix_item['bufnr']] = bufname(quickfix_item['bufnr'])
  endfor
  return join(map(values(buffer_numbers), 'fnameescape(v:val)'))
endfunction

set splitright
set splitbelow

" hi StatusLine term=inverse,bold cterm=NONE ctermbg=24 ctermfg=189
" hi StatusLineNC term=inverse,bold cterm=NONE ctermbg=24 ctermfg=153
hi User1 term=inverse,bold cterm=NONE ctermbg=29 ctermfg=159
hi User2 term=inverse,bold cterm=NONE ctermbg=29 ctermfg=16
hi User3 term=inverse,bold cterm=NONE ctermbg=24
hi User4 term=inverse,bold cterm=NONE ctermbg=24 ctermfg=221
hi User5 term=inverse,bold cterm=NONE ctermbg=24 ctermfg=209


" customizations
set showmatch              " brackets/braces that is
set mat=3                  " duration to show matching brace (1/10 sec)
set laststatus=2           " always show the status line

if has("autocmd")
  filetype indent on
endif

" spell check when writing commit logs and markdown files
autocmd filetype svn,*commit* setlocal spell
autocmd BufRead,BufNewFile *.md setlocal spell

" word auto complete (?)
set complete+=kspell
set spelllang=en
set spellfile=$HOME/Dropbox/nvim/spell/en.utf-8.add
nmap <silent> <leader>s :set spell!<CR>

" format md files to 80 chars
au BufRead,BufNewFile *.md setlocal textwidth=80

" don't hit escape key
:imap jk <Esc>
" Press i to enter insert mode, and ii to exit.
:imap ii <Esc>

""""""""""""""""""""""""""""""""""""""""""""""""""""
" from https://pmihaylov.com/vim-for-go-development/
" ctscts
""""""""""""""""""""""""""""""""""""""""""""""""""""

" probably not needed as it's deprecated and disabled by default

" disable all linters as that is taken care of by coc.nvim
let g:go_diagnostics_enabled = 0
let g:go_metalinter_enabled = []

" don't jump to errors after metalinter is invoked
let g:go_jump_to_error = 0

" use gofumpt https://github.com/mvdan/gofumpt
" let g:go_fmt_command="gopls"
" let g:go_gopls_gofumpt=1

" automatically highlight variable your cursor is on
let g:go_auto_sameids = 0

let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_generate_tags = 1

""""""""""""""""""""""""""""""""""""""""""""""""""""
" end from https://pmihaylov.com/vim-for-go-development
""""""""""""""""""""""""""""""""""""""""""""""""""""

" vim-go alternate things
map <leader>gae :<C-u>call go#alternate#Switch(0, "edit")<CR>
map <leader>gas :<C-u>call go#alternate#Switch(0, "split")<CR>
map <leader>gav :<C-u>call go#alternate#Switch(0, "vsplit")<CR>

" disable cursor keys in normal mode
map <Left>  :echo "no!"<cr>
map <Right> :echo "no!"<cr>
map <Up>    :echo "no!"<cr>
map <Down>  :echo "no!"<cr>

hi x255_Grey93 ctermfg=255 guifg=#eeeeee "rgb=238,238,238

" Things from gvim
" set guifont=Menlo\ Regular:h14
set linespace=2

:set textwidth=80
:set colorcolumn=+1
:hi ColorColumn guibg=#2d2d2d ctermbg=236
:highlight clear SignColumn 

" Write all buffers before navigating from Vim to tmux pane
let g:tmux_navigator_save_on_switch = 2

" copied from Evan:
let g:go_term_enabled = 1
let g:go_term_mode = "split"
let g:go_term_height = 10

let g:go_list_autoclose = 1

""""""
" Metalint stuff
""""""

" 5 is the default
" let g:go_metalinter_deadline = "10s"
" let g:go_metalinter_command='golangci-lint'
let g:go_metalinter_command='gopls'
" let g:go_metalinter_autosave = 1
" let g:go_list_type = "locationlist"

"let g:go_metalinter_autosave_enabled = [
"      \ 'golint',
"      \ 'bodyclose',
"      \ 'deadcode',
"      \ 'errcheck',
"      \ 'staticcheck',
"      \ 'structcheck',
"      \ 'stylecheck'
"      \ ]

"let g:go_metalinter_enabled = [
"      \ 'vet',
"      \ 'bodyclose',
"      \ 'deadcode',
"      \ 'errcheck',
"      \ 'funlen',
"      \ 'gocyclo',
"      \ 'gosec',
"      \ 'ineffassign',
"      \ 'interfacer',
"      \ 'maligned',
"      \ 'prealloc',
"      \ 'scopelint',
"      \ 'staticcheck',
"      \ 'structcheck',
"      \ 'stylecheck',
"      \ 'typecheck',
"      \ 'unconvert',
"      \ 'unparam',
"      \ 'unused',
"      \ 'varcheck'
"      \ ]

" disable gopls from vim-go(?)
" disable vim-go :GoDef short cut (gd)
" this is handled by LanguageClient [LC]
let g:go_doc_keywordprg_enabled = 0

let g:go_code_completion_enabled = 0
let g:go_gopls_enabled = 1
" using guru here, disabling gopls. Def / info uses coc below, see 'coc-definition', 'coc-type-definition' below
" let g:go_info_mode = "gopls"
" let g:go_def_mode = "gop"

" From Aaron - may have tripped me up before: https://hashicorp.slack.com/archives/C0CC1503Z/p1589482345151600
" let g:go_def_mapping_enabled = 0

autocmd BufWritePre *.rb,go :%s/\s\+$//e
" use gopls/coc and format / organize on save
" autocmd BufWritePre *.go :call CocAction('runCommand', 'editor.action.organizeImport')

" nnoremap let :GoDefType<cr>

" enable ack+the silver searcher
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif



" tab completion for coc.nvim: https://github.com/neoclide/coc.nvim/wiki/Completion-with-sources
" use <tab> for trigger completion and navigate to next complete item
" function! s:check_back_space() abort
"   let col = col('.') - 1
"   return !col || getline('.')[col - 1]  =~ '\s'
" endfunction

"inoremap <silent><expr> <TAB>
"      \ pumvisible() ? "\<C-n>" :
"      \ <SID>check_back_space() ? "\<TAB>" :
"      \ coc#refresh()

" coc.nvim config comment / syntax
" autocmd FileType json syntax match Comment +\/\/.\+$+

" Added for vault website (?)
set backupcopy=yes

set termguicolors
colorscheme dracula
" colorscheme base16-eighties
" colorscheme base16-dracula
" colorscheme base16-default-dark
" colorscheme base16-classic-dark
" colorscheme base16-solarflare
" colorscheme base16-oceanicnext
" colorscheme base16-materia
set background=dark

" function! CocCurrentFunction()
"     return get(b:, 'coc_current_function', '')
" endfunction

function! LightlineReadonly()
  return &readonly && &filetype !=# 'help' ? 'RO' : ''
endfunction

" Show full path of filename
function! FilenameForLightline()
    " returns something like database/backend.go
    "return expand("%:h:t") . '/' .expand('%:t')
    return expand("%-.50F")
endfunction

" Add diagnostic info for https://github.com/itchyny/getline.vim
" Evan's
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'filename': 'FilenameForLightline'
      \ },
      \ }
" pre nvim 0.5 
" let g:lightline = {
"       \ 'colorscheme': 'wombat',
"       \ 'active': {
"       \   'left': [ [ 'mode', 'paste' ],
"       \             [ 'cocstatus', 'readonly', 'filename', 'modified' ] ]
"       \ },
"       \ 'component_function': {
"       \   'cocstatus': 'coc#status',
"       \   'filename': 'FilenameForLightline'
"       \ },
"       \ }

" -------------------------------------------------------------------------------------------------
" coc.nvim default settings
" -------------------------------------------------------------------------------------------------

" if hidden is not set, TextEdit might fail.
set hidden

" Better display for messages
set cmdheight=2

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
" inoremap <silent><expr> <TAB>
"       \ pumvisible() ? coc#_select_confirm() :
"       \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
"       \ <SID>check_back_space() ? "\<TAB>" :
"       \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

" 2020-09-17
" Copied from Evan https://github.com/evanphx/dotfiles/commit/0283eab9d0334d14da10e8f966d876de8696419e
" let g:coc_snippet_next = '<tab>'

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
" inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
"inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" nmap <silent> [g <Plug>(coc-diagnostic-prev)
" nmap <silent> ]g <Plug>(coc-diagnostic-next)
" 
" " GoTo code navigation.
" nmap <silent> gd <Plug>(coc-definition)
" nmap <silent> gy <Plug>(coc-type-definition)
" nmap <silent> gi <Plug>(coc-implementation)
" nmap <silent> gr <Plug>(coc-references)
" " from Evan:
" map <leader>d :<C-u>call CocActiononAsync("jumpDefinition", "vsplit")<CR>

au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)

" map <leader>dv :<C-u>call CocActionAsync("jumpDefinition", "vsplit")<CR>

" Use K to show documentation in preview window
" nnoremap <silent> K :call <SID>show_documentation()<CR>
" map <leader>i :call <SID>show_documentation()<CR>

"function! s:show_documentation()
"  if (index(['vim','help'], &filetype) >= 0)
"    execute 'h '.expand('<cword>')
"  else
"    call CocAction('doHover')
"  endif
"endfunction

" Highlight symbol under cursor on CursorHold
" autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
" nmap <leader>rn <Plug>(coc-rename)

""""
" Do not use this or Command-T doesn't work the way you're used to
" 2019-12-04
""""
" Remap for format selected region
" xmap <leader>f  <Plug>(coc-format-selected)
" nmap <leader>f  <Plug>(coc-format-selected)
""""

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
" xmap <leader>a  <Plug>(coc-codeaction-selected)
" nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current line.
" nmap <leader>ac  <Plug>(coc-codeaction)
" " Apply AutoFix to problem on the current line.
" nmap <leader>qf  <Plug>(coc-fix-current)

" Introduce function text object
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
" xmap if <Plug>(coc-funcobj-i)
" xmap af <Plug>(coc-funcobj-a)
" omap if <Plug>(coc-funcobj-i)
" omap af <Plug>(coc-funcobj-a)

" Use <TAB> for selections ranges.
" NOTE: Requires 'textDocument/selectionRange' support from the language server.
" coc-tsserver, coc-python are the examples of servers that support it.
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
" command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
" set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
" set statusline^=%{StatusDiagnostic()}%{get(b:,'coc_current_function','')}

" """ status line function
" function! StatusDiagnostic() abort
"   let info = get(b:, 'coc_diagnostic_info', {})
"   if empty(info) | return '' | endif
"   let msgs = []
"   if get(info, 'error', 0)
"     call add(msgs, 'E' . info['error'])
"   endif
"   if get(info, 'warning', 0)
"     call add(msgs, 'W' . info['warning'])
"   endif
"   return join(msgs, ' ') . ' ' . get(g:, 'coc_status', '')
" endfunction
" """ end status line function

" Mappings using CoCList:
" Show all diagnostics.
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

" -------------------------------------------------------------------------------------------------
" end coc.nvim default settings
" -------------------------------------------------------------------------------------------------


" let g:coc_enable_locationlist = 0
autocmd User CocLocationsChange CocList --normal -A location

" LanguageClient things: https://github.com/autozimu/LanguageClient-neovim

" deoplete and LanguageClient-neovim via vim-plug and the follow config for LC
" Redundant with coc-go
" let g:LanguageClient_serverCommands = {
"       \ 'go': ['/Users/clint/Go/bin/gopls'],
"       \ }

let g:LanguageClient_loggingLevel = 'INFO'
let g:LanguageClient_virtualTextPrefix = ''
let g:LanguageClient_loggingFile =  expand('/Users/clint/LanguageClient.log')
let g:LanguageClient_serverStderr = expand('/Users/clint/LanguageServer.log')

" -------------------------------------------------------------------------------------------------
" begin things lifted from Evan's vimrc
" -------------------------------------------------------------------------------------------------

set wildmenu     " fancy command completion menu!
set wildmode=list:longest
set autoindent " automatically indent new lines
set expandtab     " no tabs, just spaces kthx.

"set list                     " show whitespace
set listchars=tab:»·,trail:· " show tabs and trailing spaces
set listchars+=extends:»     " show a » when a line goes off the right
                             " edge of the screen
set listchars+=precedes:«    " show a « when a line goes off the left
                             " edge of the screen

" only show the menu on completions
" set completeopt=menu

set hlsearch   " highlight searches

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

packloadall
silent! helptags ALL

" -------------------------------------------------------------------------------------------------
" end things lifted from Evan's vimrc
" -------------------------------------------------------------------------------------------------

" ruby things
autocmd FileType ruby set shiftwidth=2
set expandtab
set tabstop=2 shiftwidth=2 softtabstop=2
set autoindent
set pyxversion=2

" -------------------------------------------------------------------------------------------------
" hashivim/vim-terraform things
" -------------------------------------------------------------------------------------------------

" 2020-09-17
" Auto fmt terraform files
autocmd BufRead,BufNewFile *.tf set filetype=terraform


let g:terraform_align=1
let g:terraform_fmt_on_save=1

""""
" tags
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
    \ }


map <leader>gt :TagbarToggle<CR>
imap <leader>gt <esc>:TagbarToggle<CR>i
""""
" tags
""""


"----------------------------------------------------------------------
" Neovim
"----------------------------------------------------------------------

if has("nvim")
    " Format prior to save using LSP
    autocmd BufWritePre *.go lua vim.lsp.buf.formatting_sync(nil, 1000)
    autocmd BufWritePre *.go lua goimports(10000)
endif

"----------------------------------------------------------------------
" Neovim
"----------------------------------------------------------------------
" In neovim, we configure more things via Lua
if has("nvim")
    lua require("vim-misc")
endif


let g:ctrlp_map = '<leader>f'
"let g:ctrlp_cmd = 'CtrlP'

map <leader>b :CtrlPBuffer<CR>

set completeopt=menuone,noselect

let g:compe = {}
let g:compe.enabled = v:true
let g:compe.autocomplete = v:true
let g:compe.debug = v:false
let g:compe.min_length = 3
let g:compe.preselect = 'disable'
let g:compe.throttle_time = 80
let g:compe.source_timeout = 200
let g:compe.resolve_timeout = 800
let g:compe.incomplete_delay = 400
let g:compe.max_abbr_width = 100
let g:compe.max_kind_width = 100
let g:compe.max_menu_width = 100
let g:compe.documentation = v:true

let g:compe.source = {}
let g:compe.source.path = v:true
let g:compe.source.buffer = v:true
let g:compe.source.calc = v:true
let g:compe.source.nvim_lsp = v:true
let g:compe.source.nvim_lua = v:true
let g:compe.source.vsnip = v:true
let g:compe.source.ultisnips = v:true