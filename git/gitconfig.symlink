[credential]
	helper = osxkeychain

[apply]
  whitespace   = fix

[core]
	excludesfile = /Users/clint/.gitignore
  whitespace   = fix,space-before-tab,tab-in-indent,trailing-space
	autocrlf = input
	editor = nvim


[color]
  ui               = auto ;doesnt work for some reason ...
  interactive      = true
  status           = true
  branch           = true
  diff             = true
  [color "branch"]
  current          = blue bold 
  local            = green 
  remote           = magenta
  [color "diff"]
  meta             = blue bold
  frag             = magenta bold
  old              = red bold
  new              = green bold
  [color "status"]
  added            = yellow
  changed          = green
  untracked        = cyan

[alias]
  ; Show a short abbreviated status message
  st  = status -sb
  ci  = commit
  co  = checkout
  br  = branch
  ; Most common; shows branches pointers and brief message
  l   = log --pretty=oneline --abbrev-commit --decorate
  ; Same as l, only in reverse order (oldest -> newest)
  lr  = log --pretty=oneline --abbrev-commit --decorate --reverse
  ; Same as l, but don't show merges 
  lm  = log --pretty=oneline --abbrev-commit --decorate --no-merges
  ; Same as l, but show status (files changed, +/- for each)
  ls  = log --pretty=oneline --abbrev-commit --decorate --stat
  ; Custom format: 
  ; - abbreviated comit
  ; - author name
  ; - relative time
  ; - short message
  ; - branch pointers
  ; Mostly the same as l with addition of author and date, 
  ; except custom formats don't show color
  le  = log --pretty=format:"%Cgreen%h%Creset%x09%an%x09%ar%x09%s%x09%d"
  les  = log --pretty=format:"%Cgreen%H%Creset%x09%an%x09%ar%x09%s%x09%d"
  ; Show a nice graph
  lg  = log --oneline --graph
  ; Show abbreviated status (so I can see the current branch)
  ; and fetch origin
  sf  = !git status -sb && git fetch
  ; Same as sf, but fetch all remotes
  sfa = !git status -sb && git fetch --all
  ; Add via patch
  p   = add -p
  ; Show the diff of everything staged
  ds  = diff --staged
  s   = status
  a   = add
  b   = branch
  d   = diff
  v   = show
  c   = checkout
  cc  = commit
  praise = blame
  ; Rebase some commits, just take the last 10
  ri  = rebase -i HEAD~10
  ; Probably should use this often
  ro  = !git fetch origin && git reset --hard origin/master
  pr = "!f() { git fetch origin pull/$1/head:pr-$1 && git checkout pr-$1; }; f"
  rmi = rm --cached
	unstage = reset HEAD --
  ; Show the last commit, and add the short hash to the clipboard for easy paste
	last = !git log -1 HEAD && git log --pretty=format:"%h" -1 | cut -c 1- | tr -d '\n' | pbcopy
  which-remote = "!f() { git rev-parse --abbrev-ref $branch@{upstream}; }; f"
  findpr = "!f() {  \
    curl -s -H \"Accept: application/vnd.github.groot-preview+json\" -H \"Authorization: token ${GITHUB_API_TOKEN}\" \
      https://api.github.com/repos/hashicorp/vault/commits/${1}/pulls | \
    jq -r '.[] | .html_url'; \
    }; \
    f"

[merge]
  log = true


[user]
	email = clint@ctshryock.com
	name = catsby
	signingkey = F6B1B3E3FC1A5544

[github]
  user = catsby

[push]
	default                 = current
[diff]
	tool                    = diffmerge
[difftool "diffmerge"]
	cmd                     = diffmerge \"$LOCAL\" \"$REMOTE\"
[merge]
	tool                    = diffmerge
[mergetool "diffmerge"]
	cmd                     = diffmerge --merge --result=\"$MERGED\"  \"$LOCAL\" \"$BASE\" \"$REMOTE\"
	trustexitcode           = false
[commit]
	gpgsign = true
[url "ssh://git@github.com/"]
	insteadOf = https://github.com/
[url "git@github.com:"]
	insteadOf = https://github.com/
[userrl "https://github"]
	insteadOf = git://github
[url "ssh://git@heroku.com/"]
	insteadOf = https://git.heroku.com/
[filter "lfs"]
	process = git-lfs filter-process
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
[pull]
	ff = only
[init]
	defaultBranch = main
